#!/usr/bin/env python


from pathlib import Path
import json, six, abc
import rospy, math, time, random
from geometry_msgs.msg import Pose, PoseWithCovarianceStamped, Point, Quaternion
from threading import Lock
from nav_msgs.msg import OccupancyGrid, Odometry
from nav_msgs.srv import GetMap
from gazebo_msgs.srv import SetModelState
from gazebo_msgs.msg import ModelState
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import actionlib
from std_msgs.msg import Int16
import numpy as np
from tf.transformations import quaternion_from_euler

ROBOT_RADIUS = 0.17
standart_orientation = quaternion_from_euler(0.0,0.0,0.0)

def get_random_pos_on_map(free_space_indices, map_, safe_dist, forbidden_zones = None):
    # type: (OccupancyGrid, float, list)
    """
    Args:
        indices_y_x(tuple): a 2 elementary tuple stores the indices of the non-occupied cells, the first element is the y-axis indices,
            the second element is the x-axis indices.
        map (OccupancyGrid): map proviced by the ros map service
        forbidden_zones (list of 3 elementary tuple(x,y,r)): a list of zones which is forbidden
    Returns:
       x_in_meters,y_in_meters,theta
    """

    def is_pos_valid(x_in_meters, y_in_meters):
        for forbidden_zone in forbidden_zones:
            if (x_in_meters-forbidden_zone[0])**2+(y_in_meters-forbidden_zone[1])**2 < (forbidden_zone[2]+safe_dist)**2:
                return False

        # in pixel
        cell_radius = int(safe_dist / map_.info.resolution)
        x_index = int((x_in_meters - map_.info.origin.position.x) // map_.info.resolution)
        y_index = int((y_in_meters - map_.info.origin.position.y) // map_.info.resolution)

        # check occupancy around (x_index,y_index) with cell_radius
        # TODO use numpy for checking
        for i in range(x_index - cell_radius, x_index + cell_radius, 1):
            for j in range(y_index - cell_radius, y_index + cell_radius, 1):
                index = j * map_.info.width + i
                if index >= len(map_.data):
                    return False
                try:
                    value = map_.data[index]
                except IndexError:
                    print("IndexError: index: %d, map_length: %d" %
                          (index, len(map_.data)))
                    return False
                if value != 0:

                    return False
        return True

    assert len(free_space_indices) == 2 and len(free_space_indices[0]) == len(
        free_space_indices[1]), "free_space_indices is not correctly setup"
    if forbidden_zones is None:
        forbidden_zones = []

    n_freespace_cells = len(free_space_indices[0])
    pos_valid = False
    n_check_failed = 0
    x_in_meters, y_in_meters = None, None
    while not pos_valid:
        idx = random.randint(0, n_freespace_cells-1)
        # in cells
        y_in_cells, x_in_cells = free_space_indices[0][idx], free_space_indices[1][idx]
        # convert x, y in meters
        y_in_meters = y_in_cells * map_.info.resolution + map_.info.origin.position.y
        x_in_meters = x_in_cells * map_.info.resolution + map_.info.origin.position.x
        pos_valid = is_pos_valid(x_in_meters, y_in_meters)
        if not pos_valid:
            n_check_failed += 1
            if n_check_failed > 100:
                raise Exception(
                    "cann't find any no-occupied space please check the map information")
        # in radius
    q = quaternion_from_euler(0.0, random.uniform(-math.pi, math.pi), 0.0)

    p = Pose()
    p.position = Point(*[y_in_meters, y_in_meters, 0])
    p.orientation = Quaternion(*q)
    return p


def generate_freespace_indices(map_):
    """generate the indices(represented in a tuple) of the freesapce based on the map
    Returns:
        indices_y_x(tuple): indices of the non-occupied cells, the first element is the y-axis indices,
        the second element is the x-axis indices.
    """
    width_in_cell, height_in_cell = map_.info.width, map_.info.height
    map_2d = np.reshape(map_.data, (height_in_cell, width_in_cell))
    indices_y_x = np.where(map_2d == 0)
    return indices_y_x


class RobotManager:
    """
    A manager class using flatland provided services to spawn, move and delete Robot. Currently only one robot
    is managed
    """

    def __init__(self, ns, map_):
        # type (str, OccupancyGrid, str, int) -> None
        """[summary]
        Args:
            ns(namespace): if ns == '', we will use global namespace
            map_ (OccupancyGrid): the map info
            robot_yaml_path (str): the file name of the robot yaml file.
        """
        self.ns = ns
        self.update_map(map_)


    def update_map(self, new_map):
        # type (OccupancyGrid) -> None
        self.map = new_map
        self._free_space_indices = generate_freespace_indices(self.map)



    def move_robot(self, pose):
        # type: (Pose) -> None
        """move the robot to a given position
        Args:
            pose (Pose): target postion
        """

        start_pos = ModelState()
        start_pos.model_name = 'turtlebot3'
        start_pos.pose = pose

        rospy.wait_for_service('/gazebo/set_model_state')
        try:
            set_state = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)
            resp = set_state(start_pos)

        except rospy.ServiceException:
            print("Move Robot to position failed")

        pub = rospy.Publisher('/initialpose', PoseWithCovarianceStamped, queue_size = 10)
        rospy.sleep(3)
        start_pos = PoseWithCovarianceStamped()
        start_pos.pose.pose = pose
        pub.publish(start_pos)



    def publish_goal(self, pose):
        # type: (Pose) -> None
        """
        Publishing goal (x, y, theta)
        :param x x-position of the goal
        :param y y-position of the goal
        :param theta theta-position of the goal
        """

        client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
        client.wait_for_server()

        self.goal = MoveBaseGoal()
        self.goal.target_pose.header.frame_id = "map"
        self.goal.target_pose.header.stamp = rospy.Time.now()
        self.goal.target_pose.pose = pose

        client.send_goal(self.goal)
        wait = client.wait_for_result()
        if not wait: ############################################can be deleted later
            rospy.logerr("Action server not available!")
            rospy.signal_shutdown("Action server not available!")



    def set_start_pos_goal_pos(self, start_pos = None, goal_pos = None, min_dist=1):
        # type: (Union[Pose2D, None], Union[Pose2D, None], int)
        """set up start position and the goal postion. Path validation checking will be conducted. If it failed, an
        exception will be raised.
        Args:
            start_pos (Union[Pose2D,None], optional): start position. if None, it will be set randomly. Defaults to None.
            goal_pos (Union[Pose2D,None], optional): [description]. if None, it will be set randomly .Defaults to None.
            min_dist (float): minimum distance between start_pos and goal_pos
        Exception:
            Exception("can not generate a path with the given start position and the goal position of the robot")
        """

        def dist(x1, y1, x2, y2):
            return ((x1 - x2)**2 + (y1 - y2)**2)**(1/2)

        if start_pos is None or goal_pos is None:
            # if any of them need to be random generated, we set a higher threshold,otherwise only try once
            max_try_times = 20
        else:
            max_try_times = 1

        i_try = 0
        start_pos_ = None
        goal_pos_ = None
        while i_try < max_try_times:

            if start_pos is None:
                start_pos_ = get_random_pos_on_map(
                    self._free_space_indices, self.map, ROBOT_RADIUS * 2)
            else:
                start_pos_ = start_pos
                
            if goal_pos is None:
                goal_pos_ = get_random_pos_on_map(
                    self._free_space_indices, self.map, ROBOT_RADIUS * 2)
            else:
                goal_pos_ = goal_pos


            if dist(start_pos_.position.x, start_pos_.position.y, goal_pos_.position.x, goal_pos_.position.y) < min_dist:
                i_try += 1
                continue
            # move the robot to the start pos
            self.move_robot(start_pos_)
            try:
                # publish the goal, if the gobal plath planner can't generate a path, a, exception will be raised.
                self.publish_goal(goal_pos_)
                break
            except rospy.ServiceException:
                i_try += 1
        if i_try == max_try_times:
            # TODO Define specific type of Exception
            raise rospy.ServiceException(
                "can not generate a path with the given start position and the goal position of the robot")
        else:
            return start_pos_, goal_pos_

@six.add_metaclass(abc.ABCMeta)
class ABSTask(abc.ABCMeta('ABC', (object,), {'__slots__': ()})):
    """An abstract class, all tasks must implement reset function.
    """

    def __init__(self, robot_manager):
        # type: (ObstaclesManager, RobotManager) -> None
        #self.obstacles_manager = obstacles_manager
        self.robot_manager = robot_manager
        self._service_client_get_map = rospy.ServiceProxy('/static_map', GetMap)
        self._map_lock = Lock()
        rospy.Subscriber('/map', OccupancyGrid, self._update_map)
        # a mutex keep the map is not unchanged during reset task.

    @abc.abstractmethod #abstract methods must be implemented in its sub-classes
    def reset(self):
        """
        a funciton to reset the task. Make sure that _map_lock is used.
        """

    def _update_map(self, map_):
        # type (OccupancyGrid) -> None
        with self._map_lock:
            #self.obstacles_manager.update_map(map_)
            self.robot_manager.update_map(map_)

    
class StopReset(Exception):
    """Raised when The Task can not be reset anymore """


class RandomTask(ABSTask):
    """ Evertime the start position and end position of the robot is reset.
    """

    def __init__(self,  robot_manager):
        #type (Any, ObstaclesManager, RobotManager)
        super(RandomTask, self).__init__(robot_manager)

    def reset(self):
        """[summary]
        """
        with self._map_lock:
            max_fail_times = 3
            fail_times = 0
            while fail_times < max_fail_times:
                try:
                    start_pos, goal_pos = self.robot_manager.set_start_pos_goal_pos()
                    print(start_pos, goal_pos)
                    break
                except rospy.ServiceException as e:
                    rospy.logwarn(repr(e))
                    fail_times += 1
            if fail_times == max_fail_times:
                raise Exception("reset error!")



def get_predefined_task(ns = '', mode="random", start_stage = 1, PATHS = None):
    # type (str, int, dict) -> task
    service_client_get_map = rospy.ServiceProxy('/static_map', GetMap)
    map_response = service_client_get_map()
    robot_manager = RobotManager(ns='',map_= map_response.map)
    task = RandomTask(robot_manager)
    return task


class TaskGenerator:
    def __init__(self):
        #
        self.sr = rospy.Publisher('/scenario_reset', Int16, queue_size=1)
        self.nr = 0
       # mode = rospy.get_param("~task_mode")
  
        self.task = get_predefined_task()

        self.start_time_= time.time()           
        
        self.curr_goal_pos_ = None
        
        auto_reset = False
        
        if auto_reset:
            rospy.loginfo(
                "Task Generator is set to auto_reset mode, Task will be automatically reset as the robot approaching the goal_pos")
            self.reset_task()
            #self.robot_pos_sub_ = rospy.Subscriber(
             #   robot_odom_topic_name, Odometry, self.check_robot_pos_callback)

            rospy.Timer(rospy.Duration(0.5),self.goal_reached)
            
        else:
            # declare new service task_generator, request are handled in callback task generate
            self.reset_task()
                
        self.err_g = 100
        


    def goal_reached(self,event):

        if self.err_g < self.delta_:
            print(self.err_g)
            self.reset_task()
        if(time.time()-self.start_time_>self.timeout_):
            print("timeout")
            self.reset_task()

    def reset_srv_callback(self, req):
        rospy.loginfo("Task Generator received task-reset request!")
        self.task.reset()
        #return EmptyResponse()


    def reset_task(self):
        self.start_time_=time.time()
        info = self.task.reset()
        
        # clear_costmaps()
        if info is not None:
            self.curr_goal_pos_ = info['robot_goal_pos']
        self.sr.publish(self.nr)
        self.nr += 1

    def check_robot_pos_callback(self, odom_msg):
        # type (Odometry)
        robot_pos = odom_msg.pose.pose.position
        robot_x = robot_pos.x
        robot_y = robot_pos.y
        goal_x = self.curr_goal_pos_[0]
        goal_y = self.curr_goal_pos_[1]

        self.err_g = (robot_x-goal_x)**2+(robot_y-goal_y)**2
           


if __name__ == '__main__':
    rospy.init_node('scenario')
    task_generator = TaskGenerator()
    rospy.spin()
