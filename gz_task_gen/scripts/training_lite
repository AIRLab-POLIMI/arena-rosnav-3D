#!/usr/bin/env python


import os, sys
import rospy
import time
import rosnode
from datetime import datetime as dt
import warnings, rospkg



def get_agent_name(args = None):
    # type: () -> str
    """Function to get agent name to save to/load from file system

    Example names:
    "MLP_B_64-64_P_32-32_V_32-32_relu_2021_01_07__10_32"
    "DRL_LOCAL_PLANNER_2021_01_08__7_14"

    :param args (argparse.Namespace): Object containing the program arguments
    """
    START_TIME = dt.now().strftime("%Y_%m_%d__%H_%M")

    if args.custom_mlp:
        return (
            "MLP_B_"
            + args.body
            + "_P_"
            + args.pi
            + "_V_"
            + args.vf
            + "_"
            + args.act_fn
            + "_"
            + START_TIME
        )
    if args.load is None:
        return args.agent + "_" + START_TIME
    return args.load

def get_paths(agent_name, args = None):
    # type: (str) -> dict
    """
    Function to generate agent specific paths

    :param agent_name: Precise agent name (as generated by get_agent_name())
    :param args (argparse.Namespace): Object containing the program arguments
    """
    dir = rospkg.RosPack().get_path("arena_local_planner_drl")

    PATHS = {
        "model": os.path.join(dir, "agents", agent_name),
        "tb": os.path.join(dir, "training_logs", "tensorboard", agent_name),
        "eval": os.path.join(dir, "training_logs", "train_eval_log", agent_name),
        "robot_setting": os.path.join(
            rospkg.RosPack().get_path("simulator_setup"),
            "robot",
            "myrobot" + ".model.yaml",
        ),
        "hyperparams": os.path.join(dir, "configs", "hyperparameters"),
        "robot_as": os.path.join(dir, "configs", "default_settings.yaml"),
        "curriculum": os.path.join(
            dir, "configs", "training_curriculum_map1small.yaml"
        ),
    }
    # # check for mode
    # if args.load is None:
    #     os.makedirs(PATHS["model"])
    # elif not os.path.isfile(
    #     os.path.join(PATHS["model"], AGENT_NAME + ".zip")
    # ) and not os.path.isfile(os.path.join(PATHS["model"], "best_model.zip")):
    #     raise FileNotFoundError(
    #         "Couldn't find model named %s.zip' or 'best_model.zip' in '%s'"
    #         % (AGENT_NAME, PATHS["model"])
    #     )
    # # evaluation log enabled
    # if args.eval_log:
    #     if not os.path.exists(PATHS["eval"]):
    #         os.makedirs(PATHS["eval"])
    # else:
    #     PATHS["eval"] = None
    # # tensorboard log enabled
    # if args.tb:
    #     if not os.path.exists(PATHS["tb"]):
    #         os.makedirs(PATHS["tb"])
    # else:
    #     PATHS["tb"] = None

    return PATHS



if __name__ == "__main__":

    #args, _ = parse_training_args()

    AGENT_NAME = "MLP_ARENA2D"
    PATHS = get_paths(AGENT_NAME)

    print PATHS