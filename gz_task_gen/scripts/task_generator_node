#!/usr/bin/env python


from pathlib import Path
import json, six, abc
import rospy, math, time
from geometry_msgs.msg import Pose, PoseWithCovarianceStamped, Point, Quaternion
from threading import Lock
from nav_msgs.msg import OccupancyGrid, Odometry
from nav_msgs.srv import GetMap
from gazebo_msgs.srv import SetModelState
from gazebo_msgs.msg import ModelState
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import actionlib
from std_msgs.msg import Int16
import numpy as np
from tf.transformations import quaternion_from_euler
from gz_task_gen.tasks import get_predefined_task
from clear_costmap import clear_costmaps


class TaskGenerator:
    def __init__(self):
        #
        self.sr = rospy.Publisher('/scenario_reset', Int16, queue_size=1)
        self.nr = 0
       # mode = rospy.get_param("~task_mode")
  
        self.task = get_predefined_task()

        self.start_time_= time.time()           
        
        self.curr_goal_pos_ = None
        
        auto_reset = False
        
        if auto_reset:
            rospy.loginfo(
                "Task Generator is set to auto_reset mode, Task will be automatically reset as the robot approaching the goal_pos")
            self.reset_task()
            #self.robot_pos_sub_ = rospy.Subscriber(
             #   robot_odom_topic_name, Odometry, self.check_robot_pos_callback)

            rospy.Timer(rospy.Duration(0.5),self.goal_reached)
            
        else:
            # declare new service task_generator, request are handled in callback task generate
            self.reset_task()
                
        self.err_g = 100
        


    def goal_reached(self,event):

        if self.err_g < self.delta_:
            print(self.err_g)
            self.reset_task()
        if(time.time()-self.start_time_>self.timeout_):
            print("timeout")
            self.reset_task()

    def reset_srv_callback(self, req):
        rospy.loginfo("Task Generator received task-reset request!")
        self.task.reset()
        #return EmptyResponse()


    def reset_task(self):
        self.start_time_=time.time()
        info = self.task.reset()
        
        # clear_costmaps()
        if info is not None:
            self.curr_goal_pos_ = info['robot_goal_pos']
        self.sr.publish(self.nr)
        self.nr += 1

    def check_robot_pos_callback(self, odom_msg):
        # type (Odometry)
        robot_pos = odom_msg.pose.pose.position
        robot_x = robot_pos.x
        robot_y = robot_pos.y
        goal_x = self.curr_goal_pos_[0]
        goal_y = self.curr_goal_pos_[1]

        self.err_g = (robot_x-goal_x)**2+(robot_y-goal_y)**2
           


if __name__ == '__main__':
    rospy.init_node('scenario')
    task_generator = TaskGenerator()
    rospy.spin()
